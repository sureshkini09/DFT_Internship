
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Apr 12 2025 17:06:34 IST (Apr 12 2025 11:36:34 UTC)

// Verification Directory fv/s298 

module dff(clk, q, d);
  input clk, d;
  output q;
  wire clk, d;
  wire q;
  CDN_flop q_reg(.clk (clk), .d (d), .sena (1'b1), .aclr (1'b0), .apre
       (1'b0), .srl (1'b0), .srd (1'b0), .q (q));
endmodule

module s298(GND, VDD, CK, G0, G1, G117, G118, G132, G133, G2, G66, G67);
  input GND, VDD, CK, G0, G1, G2;
  output G117, G118, G132, G133, G66, G67;
  wire GND, VDD, CK, G0, G1, G2;
  wire G117, G118, G132, G133, G66, G67;
  wire G10, G11, G12, G13, G14, G15, G22, G23;
  wire G24, G25, G26, G27, G28, G29, G30, G31;
  wire G32, G33, G34, G35, G36, G37, G38, G39;
  wire G40, G41, G42, G43, G44, G45, G46, G47;
  wire G48, G49, G50, G51, G52, G53, G56, G57;
  wire G58, G60, G61, G64, G65, G68, G69, G70;
  wire G71, G72, G73, G74, G75, G77, G78, G80;
  wire G81, G84, G85, G86, G87, G88, G89, G90;
  wire G92, G93, G94, G95, G97, G98, G99, G100;
  wire G101, G102, G105, G106, G107, G108, G109, G110;
  wire G111, G112, G113, G114, G115, G116, G119, G120;
  wire G122, G123, G125, G126, G128, G129, n_11, n_12;
  dff DFF_0(CK, G10, G29);
  dff DFF_1(CK, G11, G30);
  dff DFF_2(CK, G12, G34);
  dff DFF_3(CK, G13, G39);
  dff DFF_4(CK, G14, G44);
  dff DFF_5(CK, G15, G56);
  dff DFF_6(CK, G66, G86);
  dff DFF_7(CK, G67, G92);
  dff DFF_8(CK, G117, G98);
  dff DFF_9(CK, G118, G102);
  dff DFF_10(CK, G132, G107);
  dff DFF_11(CK, G133, G113);
  dff DFF_12(CK, G22, G119);
  dff DFF_13(CK, G23, G125);
  not NOT_0 (G28, G0);
  not NOT_1 (G38, G10);
  not NOT_2 (G40, G13);
  not NOT_3 (G45, G12);
  not NOT_4 (G46, G11);
  not NOT_5 (G50, G14);
  not NOT_6 (G51, G23);
  not NOT_10 (G60, G22);
  not NOT_11 (G64, G15);
  not NOT_18 (G87, G66);
  not NOT_20 (G93, G67);
  not NOT_22 (G99, G117);
  not NOT_24 (G108, G112);
  not NOT_25 (G114, G133);
  not NOT_30 (G120, G2);
  not NOT_34 (G126, G1);
  and AND2_0 (G26, G28, G50);
  and AND2_1 (G27, G51, G28);
  and AND3_0 (G31, G10, G45, G13);
  and AND2_2 (G32, G10, G11);
  and AND2_3 (G33, G38, G46);
  and AND3_1 (G35, G10, G11, G12);
  and AND2_4 (G36, G38, G45);
  and AND2_5 (G37, G46, G45);
  and AND2_6 (G42, G40, G41);
  and AND4_0 (G48, G45, G46, G10, G47);
  and AND3_2 (G49, G50, G51, G52);
  and AND4_2 (G57, G45, G11, G60, G61);
  and AND2_8 (G58, G64, G65);
  and AND3_3 (G74, G12, G14, G118);
  and AND3_4 (G75, G46, G45, G14);
  and AND2_9 (G88, G14, G87);
  and AND2_10 (G89, G40, G50);
  and AND2_11 (G90, G45, G40);
  and AND2_12 (G94, G93, G13);
  and AND2_13 (G95, G50, G13);
  and AND3_5 (G100, G99, G14, G12);
  and AND2_14 (G110, G108, G109);
  and AND2_15 (G111, G10, G112);
  and AND2_16 (G115, G114, G14);
  and AND2_17 (G122, G120, G60);
  and AND2_18 (G123, G2, G22);
  and AND2_19 (G128, G126, G51);
  and AND2_20 (G129, G1, G23);
  or OR4_0 (G24, G38, G46, G45, G40);
  or OR3_0 (G25, G38, G11, G12);
  or OR4_1 (G68, G11, G12, G13, G50);
  or OR2_0 (G69, G40, G117);
  or OR2_1 (G70, G40, G14);
  or OR3_1 (G71, G46, G12, G13);
  or OR2_2 (G72, G45, G132);
  or OR2_3 (G73, G40, G132);
  or OR4_2 (G77, G112, G40, G50, G118);
  or OR2_4 (G78, G108, G38);
  or OR2_6 (G80, G11, G14);
  or OR2_7 (G81, G12, G13);
  or OR3_2 (G84, G46, G45, G14);
  or OR3_3 (G85, G45, G50, G67);
  nand NAND3_0 (G41, G12, G11, G10);
  nand NAND3_1 (G43, G24, G25, G28);
  nand NAND4_0 (G52, G13, G45, G46, G10);
  nand NAND4_1 (G65, G45, G46, G22, G61);
  nand NAND4_2 (G97, G68, G84, G85, G108);
  nand NAND4_3 (G101, G68, G69, G70, G108);
  nand NAND2_0 (G106, G77, G78);
  nand NAND4_4 (G109, G71, G72, G73, G14);
  nand NAND4_5 (G116, G70, G80, G81, G108);
  nor NOR2_0 (G29, G10, G0);
  nor NOR4_0 (G30, G31, G32, G33, G0);
  nor NOR4_1 (G34, G35, G36, G37, G0);
  nor NOR2_1 (G39, G42, G43);
  nor NOR3_0 (G44, G48, G49, G53);
  nor NOR2_2 (G47, G50, G40);
  nor NOR2_3 (G53, G26, G27);
  nor NOR3_1 (G56, G57, G58, G0);
  nor NOR2_4 (G61, G14, G40);
  nor NOR4_2 (G86, G88, G89, G90, G112);
  nor NOR3_2 (G92, G94, G95, G97);
  nor NOR2_5 (G98, G100, G101);
  nor NOR2_6 (G102, G105, G106);
  nor NOR2_8 (G107, G110, G111);
  nor NOR2_9 (G112, G57, G58);
  nor NOR2_10 (G113, G115, G116);
  nor NOR3_3 (G119, G122, G123, G0);
  nor NOR3_4 (G125, G128, G129, G0);
  and g1 (G105, n_11, n_12, G40, G108);
  not g2 (n_11, G74);
  not g3 (n_12, G75);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
